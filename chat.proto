syntax = "proto3";

option go_package = "telepathy-server/proto";
import "google/protobuf/timestamp.proto";
import "error.proto";

enum EFileType {
  EFT_UNSPECIFIED = 0;
  EFT_IMAGE = 1;
  EFT_VIDEO = 2;
}

enum ERoomType {
  ERT_UNSPECIFIED = 0;
  //  me-
  ERT_ME = 1;
  //  pv-
  ERT_PRIVATE = 2;
  //  gr-
  //  ERT_GROUP = 3;
}

/*
Room id generation rule
* 1. me-<uuid>
* 2. pv-<uuid1>-<uuid2> (alphabetical case sensitive order)
* 3. gr-<random hash>
*/

service ChatService {
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse) {}
  rpc GetRooms(GetRoomsRequest) returns (GetRoomsResponse) {
  } // do not fetch does not have updated_at
  rpc SendMsg(SendMsgRequest) returns (SendMsgResponse) {
  } // send notification to participants { "chat": ...Message }
  rpc GetMsgs(GetMsgsRequest) returns (GetMsgsResponse) {
  } // get messages from room
//  rpc UpdateRead(UpdateReadRequest) returns (UpdateReadResponse) {
//  } // update read_at, send notification to participants { "read": ...RoomRead }
}

message Room {
  string id = 1; // lookup the rule above, parse ERoomType with this id
  repeated string participants = 2;
  google.protobuf.Timestamp created_at = 3;
  optional google.protobuf.Timestamp updated_at =
      4; // updated when new message is sent
  optional string title = 5;
  optional string recent_msg = 6; // ex: 사진을 보냈습니다
//  repeated RoomRead reads = 7;
}

//message RoomRead {
//  string room_id = 1;
//  string uuid = 2;
//  google.protobuf.Timestamp read_at = 3; // server time
//}

message Message {
  string id = 1; // uuid v4
  string room_id = 2;
  google.protobuf.Timestamp created_at = 3;
  string sender_uid = 4;
  optional string body = 5;
  optional MessageFile file = 6;
}

message CreateRoomRequest {
  ERoomType type = 1;
  string title = 2;
  repeated string participants = 3;
}

message CreateRoomResponse {
  bool success = 1;
  optional Room room = 2;
  optional EError error = 3;
}

message GetRoomsRequest {
  repeated string room_ids = 1; // optional, empty list 일 경우 모든 방을 가져옴
}

message GetRoomsResponse {
  bool success = 1;
  repeated Room rooms = 2;
  optional EError error = 3;
}

message MessageFile {
  string uri = 1;
  string mime = 2; // ex: image/jpeg
  optional string thumb_uri = 3;
}

// Parse uuid(sender) with auth token
// assert: body != nil || file != nil
message SendMsgRequest {
  string room_id = 1;
  optional string body = 2;
  optional MessageFile file = 3;
}

message SendMsgResponse {
  bool success = 1;
  optional Message message = 2;
  optional EError error = 3;
}

message GetMsgsRequest {
  string room_id = 1;
  optional google.protobuf.Timestamp before = 3;
  optional google.protobuf.Timestamp after = 4;
  optional int32 limit = 5; // default: 100
}

message GetMsgsResponse {
  bool success = 1;
  repeated Message msgs = 2;
  optional bool has_more = 3;
  optional EError error = 4;
}

//message UpdateReadRequest {
//  string room_id = 1;
//}
//message UpdateReadResponse {
//  Status status = 1;
//  optional google.protobuf.Timestamp read_at = 2;
//}
