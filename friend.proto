syntax = "proto3";

option go_package = "telepathy-server/proto";
import "google/protobuf/timestamp.proto";
import "common.proto";
import "error.proto";

enum EFriendRequestStatus {
  EFRS_UNSPECIFIED = 0;
  EFRS_REQUESTED = 1;
  EFRS_ACCEPTED = 2;
  EFRS_REJECTED = 3;
  EFRS_CANCELED = 4;
}

enum EFriendRequestResult {
  EFRR_UNSPECIFIED = 0;
  EFRR_REQUESTED = 1; // 정상적으로 요청된 경우
  EFRR_BLOCKED_FRIEND = 2; // 내가 상대방을 차단한 경우
  EFRR_ALREADY_FRIEND = 3; // 이미 친구인 경우
  EFRR_ALREADY_REQUESTED = 4; // 이미 요청을 보낸 경우
  EFRR_INVALID_REQUEST = 5; // 요청이 잘못된 경우 (ex. 나에게 요청을 보낸 경우)
}


service FriendService {
  // 주기적으로(앱을 처음 키는 시점 정도로) 추천친구를 가져오는 서비스
  rpc GetRecommendFriendsUID(GetRecommendFriendsUIDRequest)
      returns (GetRecommendFriendsUIDResponse) {}
  // 제공된 추천친구 uid들을 기반으로 친구정보를 가져오는 서비스
  rpc GetBlockedUsers(GetBlockedUsersRequest)
      returns (GetBlockedUsersResponse) {}
  rpc CreateBlockedFriend(CreateBlockedFriendRequest)
      returns (CreateBlockedFriendResponse) {}
  rpc UnblockUsers(UnblockUsersRequest)
      returns (UnblockUsersResponse) {}
  rpc DeleteBestFriends(DeleteBestFriendsRequest)
      returns (DeleteBestFriendsResponse) {}
  rpc CreateBestFriend(CreateBestFriendRequest)
      returns (CreateBestFriendResponse) {}
  rpc GetWhoCrushMe(GetWhoCrushMeRequest) returns (GetWhoCrushMeResponse) {}
  rpc GetPhoneBookFriend(GetPhoneBookFriendRequest)
      returns (GetPhoneBookFriendResponse) {}
  rpc SendFriendRequest(SendFriendRequestRequest) returns (SendFriendRequestResponse);
  rpc UpdateFriendRequestStatus(UpdateFriendRequestStatusRequest) returns (UpdateFriendRequestStatusResponse); // ACCEPTED, REJECTED, CANCELED
  rpc GetFriendRequests(GetFriendRequestsRequest) returns (GetFriendRequestsResponse); // 받은 친구 요청들
  rpc GetSentFriendRequests(GetSentFriendRequestsRequest) returns (GetSentFriendRequestsResponse); // 보낸 친구 요청들

}


message GetRecommendFriendsUIDRequest {repeated string phone_book_friends = 1;}

message GetRecommendFriendsUIDResponse {
  bool success = 1;
  repeated string recommended_friends_uid = 2;
  optional EError error = 3;
}

message GetRecommendFriendsRequest {
  repeated string recommended_friends_uid = 1;
}

message GetRecommendFriendsResponse {
  bool success = 1;
  repeated User recommended_friends = 2;
  optional EError error = 3;
}

message GetBlockedUsersRequest {}

message GetBlockedUsersResponse {
  bool success = 1;
  repeated User blocked_users = 2;
  optional EError error = 3;
}

message CreateBlockedFriendRequest {string friend_id = 1;}

message CreateBlockedFriendResponse {
  bool success = 1;
  optional EError error = 2;
}

message UnblockUsersRequest {
  repeated string uuid = 2;
}

message UnblockUsersResponse {
  bool success = 1;
  optional EError error = 2;
}

message CreateCrushRequest {
  string friend_id = 2;
  string display_name = 3;
  string reason = 4;
}

message CreateCrushResponse {
  bool success = 1;
  optional EError error = 2;
}

message GetWhoCrushMeRequest {}

message GetWhoCrushMeResponse {
  bool success = 1;
  repeated User users = 2;
  optional EError error = 3;
}

message CreateBestFriendRequest{
  repeated string uuids = 1;
}

message CreateBestFriendResponse {
  bool success = 1;
  optional EError error = 2;
}

message DeleteBestFriendsRequest {
  repeated string uuid = 1;
}

message DeleteBestFriendsResponse {
  bool success = 1;
  optional EError error = 2;
}

message GetPhoneBookFriendRequest {
  string phone_number_hash = 1;
}

message GetPhoneBookFriendResponse {
  bool success = 1;
  User user = 2;
  optional EError error = 3;
}


message FriendRequest {
  string id = 1;
  string from = 2;
  string to = 3;
  EFriendRequestStatus status = 4;
  optional google.protobuf.Timestamp requested_at = 5; // 내가 요청을 보낸 시간
  optional google.protobuf.Timestamp accepted_at = 6; // 상대방이 요청을 수락한 경우
  optional google.protobuf.Timestamp rejected_at = 7; // 상대방이 요청을 거절한 경우
  optional google.protobuf.Timestamp canceled_at = 8; // 내가 요청을 취소한 경우
}

message SendFriendRequestRequest {
  string to = 1;
}

message SendFriendRequestResponse {
  bool success = 1;
  optional EFriendRequestResult result = 2;
  optional EError error = 3;
}

message UpdateFriendRequestStatusRequest {
  string id = 1;
  EFriendRequestStatus status = 2;
}

message UpdateFriendRequestStatusResponse {
  bool success = 1;
  optional EError error = 2;
}

message GetFriendRequestsRequest {
  string to = 1;
}

message GetFriendRequestsResponse {
  bool success = 1;
  repeated FriendRequest requests = 2;
  optional EError error = 3;
}

message GetSentFriendRequestsRequest {
  string from = 1;
}

message GetSentFriendRequestsResponse {
  bool success = 1;
  repeated FriendRequest requests = 2;
  optional EError error = 3;
}

