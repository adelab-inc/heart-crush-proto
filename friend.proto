syntax = "proto3";

option go_package = "heart-crush-server/proto";
import "google/protobuf/timestamp.proto";

import "common.proto";
import "error.proto";

enum EFriendRequestStatus {
  EFRS_UNSPECIFIED = 0;
  EFRS_REQUESTED = 1;
  EFRS_ACCEPTED = 2;
  EFRS_REJECTED = 3;
  EFRS_CANCELED = 4;
}

enum EFriendRequestResult {
  EFRR_UNSPECIFIED = 0;
  EFRR_REQUESTED = 1; // 정상적으로 요청된 경우
  EFRR_BLOCKED_FRIEND = 2; // 내가 상대방을 차단한 경우
  EFRR_ALREADY_FRIEND = 3; // 이미 친구인 경우
  EFRR_ALREADY_REQUESTED = 4; // 이미 요청을 보낸 경우
  EFRR_INVALID_REQUEST = 5; // 요청이 잘못된 경우 (ex. 나에게 요청을 보낸 경우)
  EFRR_INVALID_USER = 6; // 상대방이 존재하지 않는 경우
}


service FriendService {
  rpc SendFriendRequest(SendFriendRequestRequest) returns (SendFriendRequestResponse);
  rpc UpdateFriendRequestStatus(UpdateFriendRequestStatusRequest) returns (UpdateFriendRequestStatusResponse); // ACCEPTED, REJECTED, CANCELED
  rpc GetReceivedFriendRequests(GetReceivedFriendRequestsRequest) returns (GetReceivedFriendRequestsResponse); // 받은 친구 요청들
  rpc GetSentFriendRequests(GetSentFriendRequestsRequest) returns (GetSentFriendRequestsResponse); // 보낸 친구 요청들
  rpc AddBestFriends(AddBestFriendsRequest) returns (AddBestFriendsResponse) {}
  rpc DeleteBestFriends(DeleteBestFriendsRequest) returns (DeleteBestFriendsResponse) {}
  rpc DeleteFriends(DeleteFriendsRequest) returns (DeleteFriendsResponse) {} // 한쪽만 삭제되는 경우는 없음. 양쪽 다 삭제 되어야 함
}


message FriendRequest {
  string id = 1;
  string from = 2; // uuid
  string to = 3; // uuid
  EFriendRequestStatus status = 4;
  optional google.protobuf.Timestamp requested_at = 5; // 내가 요청을 보낸 시간
  optional google.protobuf.Timestamp accepted_at = 6; // 상대방이 요청을 수락한 경우
  optional google.protobuf.Timestamp rejected_at = 7; // 상대방이 요청을 거절한 경우
  optional google.protobuf.Timestamp canceled_at = 8; // 내가 요청을 취소한 경우
}

message SendFriendRequestRequest {
  string to = 1;
}

message SendFriendRequestResponse {
  bool success = 1;
  optional EFriendRequestResult result = 2;
  optional EError error = 3;
}

message UpdateFriendRequestStatusRequest {
  string id = 1;
  EFriendRequestStatus status = 2;
}

message UpdateFriendRequestStatusResponse {
  bool success = 1;
  optional EError error = 2;
}

message GetReceivedFriendRequestsRequest {
}

message GetReceivedFriendRequestsResponse {
  bool success = 1;
  repeated FriendRequest requests = 2;
  optional EError error = 3;
}

message GetSentFriendRequestsRequest {
}

message GetSentFriendRequestsResponse {
  bool success = 1;
  repeated FriendRequest requests = 2;
  optional EError error = 3;
}

message AddBestFriendsRequest{
  repeated string uuids = 1;
}

message AddBestFriendsResponse {
  bool success = 1;
  optional EError error = 2;
}

message DeleteBestFriendsRequest {
  repeated string uuids = 1;
}

message DeleteBestFriendsResponse {
  bool success = 1;
  optional User user = 2; // me
  optional EError error = 3;
}

message CreateCrushRequest {
  string friend_id = 2;
  string display_name = 3;
  string reason = 4;
}

message CreateCrushResponse {
  bool success = 1;
  optional EError error = 2;
}

message GetWhoCrushedMeRequest {}

message GetWhoCrushedMeResponse {
  bool success = 1;
  repeated User users = 2;
  optional EError error = 3;
}

message DeleteFriendsRequest {
  repeated string uuids = 1;
}
message DeleteFriendsResponse {
  bool success = 1;
  optional User user = 2; // me
  optional EError error = 3;
}
