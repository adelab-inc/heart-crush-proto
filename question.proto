syntax = "proto3";

option go_package = "telepathy-server/proto";

import "google/protobuf/timestamp.proto";

import "error.proto";

service QuestionService {
  rpc CreateQuestion(CreateQuestionRequest) returns (CreateQuestionResponse) {}
  rpc GetQuestions(GetQuestionsRequest) returns (GetQuestionsResponse) {}
  rpc UpdateReply(UpdateReplyRequest) returns (UpdateReplyResponse) {}
  rpc UpdateQuestionRead(UpdateQuestionReadRequest)
      returns (UpdateQuestionReadResponse) {}
  rpc DeleteQuestion(DeleteQuestionRequest) returns (DeleteQuestionResponse) {}
  rpc GetRandomQuestion(GetRandomQuestionRequest) returns (GetRandomQuestionResponse) {}
}

enum EQuestionType {
  EQT_UNSPECIFIED = 0;
  EQT_GETTOKNOW = 1;
  EQT_BALANCE = 2;
  EQT_CHOOSE = 3;
}

enum EQuestionStatus {
  // 보낸 카드
  EQS_UNSPECIFIED = 0;
  EQS_SENDER_SENT = 1; // 카드를 보냈지만, 아직 답장이 안온 카드
  EQS_SENDER_REPLY_CAME = 2; // 답장이 왔지만, 아직 읽지 않은 카드
  EQS_SENDER_CHECKED = 3; // 답장까지 읽은 카드

  // 받은 카드
  EQS_RECEIVER_RECEIVED = 4; // 새로 전달 받았지만, 아직 읽지 않은 카드
  EQS_RECEIVER_CHECKED = 5; // 전달받은 카드를 읽었지만, 아직 답장을 보내지 않은 카드
  EQS_RECEIVER_REPLIED = 6; // 답장까지 보낸 카드
}

message QuestionCard {
  string question_id = 1;
  EQuestionType question_type = 2;
  string target_user_id = 3; // 내가 sender면 -> receiver 정보 / 내가 receiver면 sender 정보
  string target_user_name = 4;
  EQuestionStatus question_status = 5;
  Content content = 6;
  optional Option answer = 7; // 답장이 없는 경우 null
  google.protobuf.Timestamp created_at = 10;
  optional google.protobuf.Timestamp replied_at = 11; // 답장이 없는 경우 null
}

message Content {
  string question_title = 1;
  repeated Option question_options = 2;
}

message Option {
  int32 idx = 1;
  string text = 2;
}

message CreateQuestionRequest {
  string sender_id = 1; // 자신의 uid 혹은 자신의 익명 uid
  string receiver_id = 2;
  EQuestionType question_type = 3;
  Content content = 4;
}

message CreateQuestionResponse { Status status = 1; }

message GetQuestionsRequest {
  string uid = 1; // 사용자 / 익명 / 짝사랑 익명 중 선택 1
}

message GetQuestionsResponse {
  Status status = 1;
  repeated QuestionCard sent_card = 2;
  repeated QuestionCard received_card = 3;
}

message UpdateReplyRequest {
  string question_id = 1;
  Option answer = 2;
}

message UpdateReplyResponse { Status status = 1; }

message UpdateQuestionReadRequest { string question_id = 1; }

message UpdateQuestionReadResponse { Status status = 1; }

message DeleteQuestionRequest { string question_id = 1; }

message DeleteQuestionResponse { Status status = 1; }

message GetRandomQuestionRequest {
  EQuestionType question_type = 1;
  string target_uid = 2;
}

message GetRandomQuestionResponse {
  Status status = 1;
  Content content = 2;
}
