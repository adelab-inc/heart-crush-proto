syntax = "proto3";

option go_package = "heart-crush-server/proto";

import "common.proto";
import "error.proto";
import "google/protobuf/timestamp.proto";


service UserService {

  rpc StartSmsVerification (StartSmsVerificationRequest) returns (StartSmsVerificationResponse) {}
  rpc CheckSmsVerification (CheckSmsVerificationRequest) returns (CheckSmsVerificationResponse) {}
  rpc Register (RegisterRequest) returns (RegisterResponse) {}
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {}
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {}
  rpc GetRandomNick(GetRandomNickRequest) returns (GetRandomNickResponse) {}
  rpc UpsertProfile(UpsertProfileRequest) returns (UpsertProfileResponse) {} // crush profile 은 업데이트 안됨. 삭제만 가능. 설정은 SetCrush 에서 가능

  //  차단
  rpc BlockUsers(BlockUsersRequest) returns (BlockUsersResponse) {}
  rpc UnblockUsers(UnblockUsersRequest) returns (UnblockUsersResponse) {}

  //  하트 보내기
  rpc SetCrush(SetCrushRequest) returns (SetCrushResponse) {}
  rpc GetReceivedCrushes(GetReceivedCrushesRequest)
      returns (GetReceivedCrushesResponse) {}
  rpc CheckCrushResult(CheckCrushResultRequest) returns (CheckCrushResultResponse) {}
  rpc GetCrushBumpCount(GetCrushBumpCountRequest) returns (GetCrushBumpCountResponse) {} // 나를 좋아하는 사람과 만난 횟수

  // ble crush
  rpc BumpBle(BumpBleRequest) returns (BumpBleResponse) {} // ble 마주친 사람 기록
  rpc GetBleBumps(GetBleBumpsRequest) returns (GetBleBumpsResponse) {} // ble 마주친 사람 조회

  rpc DeleteProfile(DeleteProfileRequest) returns (DeleteProfileResponse) {} // default profile 은 절대 지우면 안됨!
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {} // uuid, phone_number_hashes, school_code 로 검색
}

// Max 3 times per 5 minutes
message StartSmsVerificationRequest {
  string phone_number = 1;
}

message StartSmsVerificationResponse {
  bool success = 1;
  optional EError error = 2;
  optional bool is_locked = 3;
  optional int32 locked_remained_tick = 4;
}

message CheckSmsVerificationRequest {
  string phone_number = 1;
  string verification_code = 3;
}

// If success, create user with the phone number and return custom token
message CheckSmsVerificationResponse {
  bool success = 1;
  bool need_to_register = 2; // 생년월일, 이름, 성별 기입 했는지 여부. DB 에서 uuid 로 조회시 없을 때 이 값을 true 로 줌
  optional EError error = 3;
  optional string custom_token = 4;
}

message RegisterRequest {
  string name = 1;
  EGender gender = 2;
  string birth = 3;
  string hashed_password = 4;
}

message RegisterResponse {
  bool success = 1;
  optional User user = 2;
  optional EError error = 3;
}


/*
profile을 업데이트하는 서비스 -> 기존의 정보와 바뀐 정보를 조합하고 채워넣어
보내주시면 됩니다. profile Image 삭제와 같은 경우에는 마찬가지로 다음과 같이
보내주시면 됩니다. prefix :
"https://storage.googleapis.com/telepathy-server/image/{사진_이름}" 여성 ->
"girlThumbnail.png"과 "girl.png"를 보내주시면 됩니다. 남성 ->
"boyThumbnail.png"과 "boy.png"를 보내주시면 됩니다.
*/
message UpdateUserRequest {
  optional School school = 1;
  optional int32 school_grade = 2; // update only when != 0
  repeated ChipItem chips = 3;
  optional string fcm_token = 4; // 서버에만 업데이트 함
  optional string birth = 5;
  optional EGender gender = 6;
  optional bool asked_to_update_profile = 7; // update only when true
  optional Config config = 8;
}

message UpdateUserResponse {
  bool success = 1;
  optional User user = 2;
  optional EError error = 3;
}

message DeleteUserRequest {string reason = 2;}

message DeleteUserResponse {
  // Error_INVALID_UID,Error_MONGO_DELETE, Error_MONGO_INSERT, Error_NO_ERROR
  bool success = 1;
  optional EError error = 2;
}

message StudentsInGrade {
  int32 grade = 1;
  repeated User students = 2;
}


message GetRandomNickRequest {}

message GetRandomNickResponse {
  bool success = 1;
  optional string random_nick = 2;
  optional EError error = 3;
}

message UpsertProfileRequest {
  EProfileType type = 1;
  string name = 2;
  string description = 3;
  optional string profile_img_url = 4;
  optional string thumbnail_img_url = 5;
  //  optional string crush_uid = 6; // only when type == EPT_CRUSH
}

message UpsertProfileResponse {
  bool success = 1;
  optional User user = 2;
  optional EError error = 3;
}


message BlockUsersRequest {
  repeated string uuids = 1;
}

message BlockUsersResponse {
  bool success = 1;
  optional User user = 2;
  optional EError error = 3;
}

message UnblockUsersRequest {
  repeated string uuids = 2;
}

message UnblockUsersResponse {
  bool success = 1;
  optional User user = 2;
  optional EError error = 3;
}

message SetCrushRequest {
  string to = 1; // uuid
  string name = 2; // length <= 10
  string reason = 3; // length <= 100
}
message SetCrushResponse {
  bool success = 1;
  optional User user = 2;
  optional EError error = 3;
}

message GetReceivedCrushesRequest {}
message GetReceivedCrushesResponse {
  bool success = 1;
  repeated Profile profiles = 2;
  optional EError error = 3;
}

message GetCrushBumpCountRequest {}
message GetCrushBumpCountResponse {
  bool success = 1;
  optional int32 count = 2;
  optional EError error = 3;
}

message CheckCrushResultRequest {}
message CheckCrushResultResponse {
  bool success = 1;
  optional User user = 2; // 있으면 매칭 됨, 없으면 안됨
  optional EError error = 3;
}

message BumpBleRequest {
  repeated string uuids = 1;
}
message BumpBleResponse {
  bool success = 1;
  optional EError error = 3;
}

message GetBleBumpsRequest {
  optional google.protobuf.Timestamp start_time = 1;
  optional google.protobuf.Timestamp end_time = 2;
}
message GetBleBumpsResponse {
  bool success = 1;
  repeated BleBump bumps = 2;
  optional EError error = 3;
}
message BleBump {
  string id = 1;
  google.protobuf.Timestamp created_at = 2;
  User user = 3;
}

message DeleteProfileRequest {
  string profile_id = 1;
}
message DeleteProfileResponse {
  bool success = 1;
  optional User user = 2;
  optional EError error = 3;
}

message SearchUsersRequest {
  repeated string uuids = 1;
  repeated string phone_number_hashes = 2;
  optional string school_code = 3;
}

message SearchUsersResponse {
  bool success = 1;
  repeated User users = 2;
  optional EError error = 3;
}

