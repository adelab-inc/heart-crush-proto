syntax = "proto3";

// package user;
option go_package = "telepathy-server/proto";

import "common.proto";
import "google/protobuf/timestamp.proto";
import "error.proto";

service AuthService {
  rpc CreateAuthCode(CreateAuthCodeRequest) returns (CreateAuthCodeResponse) {}
  rpc ValidateAuthCode(ValidateAuthCodeRequest)
      returns (ValidateAuthCodeResponse) {}
  rpc SignUp(SignUpRequest) returns (SignUpResponse) {}
  rpc LoginWithCode(LoginWithCodeRequest) returns (LoginResponse) {}
  rpc LoginWithPassword(LoginWithPasswordRequest) returns (LoginResponse) {}
  rpc LockUser(LockUserRequest) returns (LockUserResponse) {}
  rpc EmailRegister(EmailRegisterRequest) returns (EmailRegisterResponse) {}
  rpc CreateEmailAuthCode(CreateEmailAuthCodeRequest)
      returns (CreateEmailAuthCodeResponse) {}
  rpc ValidateEmailAuthCode(ValidateEmailAuthCodeRequest)
      returns (ValidateEmailAuthCodeResponse) {}
  rpc LockEmailUser(LockEmailUserRequest) returns (LockEmailUserResponse) {}
  rpc UpdatePhoneNumber(UpdatePhoneNumberRequest)
      returns (UpdatePhoneNumberResponse) {}
  rpc CheckUserStatus(CheckUserStatusRequest)
      returns (CheckUserStatusResponse) {}
  rpc BanUser(BanUserRequest) returns (BanUserResponse) {}
  rpc TestToken(TestTokenRequest) returns (TestTokenResponse) {}
}

message AuthUser {
  string uid = 1;
  string phone = 2;
  string password = 3;
  int64 created_at = 4;      // UnixTime -> change to localtime (ex. kst)
  int64 phone_updated_at = 5; // UnixTime
  int64 password_updated_at = 6;
}

message Term {
  string uid = 1;
  bool agree = 2;
  int64 created_at = 3; // UnixTime -> change to localtime (ex. kst)
  int64 updated_at = 4; // UnixTime
}

enum UserStatus {
  EUS_UNSPECIFIED = 0;
  // 정상적인 유저
  EUS_VALID = 1; // 정상적인 유저의 경우

  // 기타 등등 1xx
  EUS_INVALID = 100; // 가입되어있지 않은 유저의 경우

  // 시스템 관련 2xx
  EUS_SYSTEM_MAINTENANCE = 200; // 시스템 점검 관련
  EUS_NEED_UPDATE = 201;        // 업데이트가 필요한 유저의 경우

  // 이용 제한 관련 3xx
  EUS_BANNED = 300;    // 유저가 이용제한(임시 정지)된 경우
  EUS_FORBBIDEN = 301; // 유저가 이용정지(영구 정지)된 경우
}

message CreateAuthCodeRequest {string phone = 1;}

message CreateAuthCodeResponse {
  Status status = 1;
  bool is_locked = 2;
  int32 locked_remained_tick = 3;
}

message ValidateAuthCodeRequest {
  string phone = 1;
  string code = 2;
}

message ValidateAuthCodeResponse {Status status = 1;}

message SignUpRequestUser {
  string name = 1;
  EGender gender = 2;
  string birth = 3;       // 20030407
  string phone_number = 4; // 01041948536
  string profile_img_url = 5;
  string thumbnail_img_url = 6;
}

message SignUpRequest {
  SignUpRequestUser user = 1;
  string password = 3;
}

message SignUpResponse {
  Status status = 1;
  string token = 2;
}

message LoginWithCodeRequest {
  string phone = 1;
  string code = 2;
}

message LoginWithPasswordRequest {
  string phone = 1;
  string password = 2;
}

message LoginResponse {
  Status status =
      1; // USER_NOT_REGISTERED, UNEXPECTED_ERROR, AUTHENTICATE_FAILED, NO_ERROR
  bool isLocked = 2;            // user가 lock이 됐는지 확인
  int32 locked_remained_tick = 3; // unit is second, 남은 시간
  string token = 4;
}

message LockUserRequest {// all fields required
  string phone = 1;
  int32 tick = 2; // unit is second
}

message LockUserResponse {
  Status status = 1; // UNEXPECTED_ERROR, NO_ERROR
}

message EmailRegisterRequest {string email = 1;}

message EmailRegisterResponse {Status status = 1;}

message CreateEmailAuthCodeRequest {string email = 1;}

message CreateEmailAuthCodeResponse {
  Status status = 1;
  bool is_locked = 2;            // user가 lock이 됐는지 확인
  int32 locked_remained_tick = 3; // unit is second, 남은 시간
}

message ValidateEmailAuthCodeRequest {
  string email = 1;
  string code = 2;
}

message ValidateEmailAuthCodeResponse {
  // ABNORMAL_APPROACH, UNEXPECTED_ERROR, AUTHENTICATE_FAILED, NO_ERROR
  Status status = 1;
  string token = 2;
}

message LockEmailUserRequest {
  string email = 1;
  int32 tick = 2;
}
message LockEmailUserResponse {Status status = 1;}

message UpdatePhoneNumberRequest {string phone = 1;}

message UpdatePhoneNumberResponse {Status status = 1;}

message TestTokenRequest {string uid = 1;}

message TestTokenResponse {
  string id_token = 1;
  string refresh_token = 2;
}

message BannedUser {
  bool forbidden = 1;  // true -> 영구 정지 // false -> 임시 정지
  string content = 2; // 제한 내용 // ex. 하트크러시 이용제한 7일
  string reason = 3;  // 제한 사유 // ex. 이용약관 위반
  google.protobuf.Timestamp created_at = 4; // 언제부터 정지인지 명시
  optional google.protobuf.Timestamp expired_at =
      5; // 언제까지 정지인지 명시 // 영구정지시 안보내주거나, null값을
  // 보내주시면 됩니다.
}

message BanUserRequest {
  string uid = 1;
  BannedUser ban_user = 2;
}

message BanUserResponse {Status status = 1;}

message CheckUserStatusRequest {
  // string version = 2; // unimplement yet
}

message CheckUserStatusResponse {
  Status status = 1;
  optional UserStatus user_status = 2;
  optional BannedUser ban_user = 3;
}
